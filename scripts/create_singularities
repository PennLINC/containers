#!/bin/bash
#emacs: -*- mode: shell-script; c-basic-offset: 4; tab-width: 4; indent-tabs-mode: t -*- 
#ex: set sts=4 ts=4 sw=4 noet:
#
#
# COPYRIGHT: Yaroslav Halchenko 2018
#
# LICENSE: MIT
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.
#

#
# TODOs when get to refactor this prototype
# - add options to
#   - skip getting an image (datalad containers-add call)

set -eu

IMAGES_DIR="images"


function info() {
	echo -e "I: $@" >&2
}

function error() {
	echo -e "E: $@" >&2
}



function get_last_docker_version_tag() {
	dh="$1"
	j=$(curl -s -k https://registry.hub.docker.com/v1/repositories/$dh/tags)
	versions=$(echo "$j" | jq -c '.[]["name"]' | sed -e 's,",,g' | sort -Vr)
	nversions=$(echo "$versions" | wc -l)
	if [ "$nversions" -gt 1 ]; then
		# need to sort etc
		# select only the ones which seems to be semantic and/or master/latest
		# this one would print both version tag and the one with stripped leading vV
		#  | sed -n -r 's/^(v*([0-9].*[0-9]\..*))/\1 \2/gp'
		# This one would also allow for master and latest.
		# \2 works in one case, \4 in the other ;)
		#  | sed -n -r 's/^([Vv]?(([0-9]{1,10}\..*))|((master|latest)$))/\1 \2\4/gp'
		# sort -V is not disregarding v prefix, so we do store pure version and original tag in the same line
		# Some release alpha releases, so probably would skip thos for now
		good_versions=$(echo "$versions" \
							| grep -v '[ab][0-9][0-9]*$' \
							| sed -n -r 's/^([Vv]?(([0-9]{1,10}\..*))|((master)$))/\2\4@\1/gp')
		last_version=$(echo -e "$good_versions" |sort -Vr |head -n 1)
	elif [ -z "$versions" ]; then
		info $dh no version. Tags: $versions
		return
	else
		last_version="$versions"
	fi
	echo "$last_version"
}


function get_familyname() {
	dh="$1"
	family="$2"
	name=${dh#*/}
    # sanitize for datalad not allowing _ in the container names
    name=${name//_/-}
	echo "$family-$name"
}

function create_singularity_file() {
	dh="$1"
	version_tag="$2"
	version_pure="$3"
	family="$4"
	familyname=$(get_familyname "$dh" "$family")
	image_name="${familyname}--${version_pure}"
	outdir="$IMAGES_DIR/$family"
	mkdir -p "$outdir"
	singfile="$outdir/Singularity.$image_name"
	info "$singfile \t from \t $dh:$version_tag"
	cat >| "$singfile" <<EOF
#
# Automagically prepared for ReproNim/containers distribution.
# See http://github.com/ReproNim/containers for more info
#
Bootstrap: docker
From: $dh:$version_tag

%post

# Create commonly present root directories to avoid need in overlays not supported
# on older systems
mkdir -p /ihome /data /data2 /zfs /isi /dartfs /dartfs-hpc

%environment
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# TODO: Take advantage of the fact that it is a bids-app somehow?
EOF
	echo "$singfile"
}

function get_image_for_singularity_file() {
	singfile="$1"
	singtag="$(basename ${singfile//Singularity./})" # Tag on singularity-hub
	imagefile="$(dirname $singfile)/$singtag.sing"
	imagefilename=$(basename $imagefile)
	name=${imagefilename%%--*}
	if [ ! -e "$imagefile" ] && [ ! -L "$imagefile" ]; then
		info " geting image $imagefile"
		# use datalad to add/change a record
		# {img_dspath} handling needs https://github.com/datalad/datalad-container/issues/72 TODO WiP
		datalad containers-add "$name" \
			 -i "$imagefile" \
			 --update \
			 --call-fmt '{img_dspath}/scripts/singularity_cmd run {img} {cmd}' \
			 -u shub://ReproNim/containers:$singtag \
		|| error "No image $imagefilename was found yet"
		# TODO: later make it work with updating existing one. We will not be able to use
		# containers-add --update since original URL is version specific. That is why it
		# also does not make much sense to create a image file without version. We better
		# collect all versions available, so in case an execution of previous version is
		# needed it could still be done "semi-manually".  May be just via adding
		# -c datalad.containers.NAME.image variable pointing to the previous version of the
		# container
	fi
}

function generate_singularity_for_docker_image() {
	dh="$1"
	family="$2"
	last_version=$(get_last_docker_version_tag "$dh")
	if [ ! -z "$last_version" ]; then
		last_version_pure=${last_version%%@*}
		last_version_tag=${last_version#*@}
		# echo $dh $last_version
		singfile=$(create_singularity_file "$dh" "$last_version_tag" "$last_version_pure" "$family")
		get_image_for_singularity_file "$singfile"
	fi
}

curl -s -k https://raw.githubusercontent.com/BIDS-Apps/bids-apps.github.io/master/_config.yml \
	| awk '/^ *dh:/{print $2}' \
	| sed -e "s,',,g" \
	| while read dh; do
	generate_singularity_for_docker_image "$dh" "bids"
done

# validator is not bids-app but we will stick it along with bids
generate_singularity_for_docker_image "bids/validator" "bids"
